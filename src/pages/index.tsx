import { Card } from "@/components/Card";
import { GoogleMap } from "@/components/GoogleMap";
import useGetListOfHotelsQuery from "@/hooks/useGetListOfHotelsQuery";
import { Hotel } from "@/types/getHotelList.type";
import { Inter } from "next/font/google";
import Head from "next/head";
import { useCallback, useState } from "react";

const inter = Inter({ subsets: ["latin"] });

// function MyMapComponent({
//   center,
//   zoom,
// }: {
//   center: google.maps.LatLngLiteral;
//   zoom: number;
// }) {
//   const ref = useRef<HTMLDivElement>(null);

//   useEffect(() => {
//     new window.google.maps.Map(ref.current as HTMLDivElement, {
//       center,
//       zoom,
//     });
//   });

//   return <div ref={ref} id="map" style={{ width: "100%", height: "100vh" }} />;
// }
// const render = (status: Status) => {
//   const props = { center: { lat: -34.397, lng: 150.644 }, zoom: 4 };
//   switch (status) {
//     case Status.LOADING:
//       console.log(status, Status.LOADING);
//       return <>Loading...</>;
//     case Status.FAILURE:
//       console.log(status, Status.FAILURE);
//       return <>Failed</>;
//     case Status.SUCCESS:
//       console.log(status, Status.SUCCESS);
//       return <MyMapComponent center={props.center} zoom={props.zoom} />;
//   }
// };

export default function Home() {
  const { data } = useGetListOfHotelsQuery(
    { cityCode: "BOM" },
    { retry: false }
  );

  const [center, setCenter] = useState<google.maps.LatLngLiteral>({
    lat: 19.0866,
    lng: 72.8885,
  });
  const [zoom, setZoom] = useState<number>(13);

  const [highlightedHotel, setHighlightedHotel] = useState<Hotel | null>(null);

  const onIdle = (map: google.maps.Map) => {
    setZoom(map.getZoom()!);
    const nextCenter = map.getCenter();
    if (nextCenter) {
      setCenter(nextCenter.toJSON());
    }
  };

  const onMarkerClick = useCallback(
    (payload: Hotel) => {
      if (highlightedHotel === payload) {
        setHighlightedHotel(null);
      } else {
        setHighlightedHotel(payload);
      }
    },
    [highlightedHotel]
  );

  return (
    <div>
      <Head>
        <title>Google Maps Marker Demo</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="h-screen relative">
          <GoogleMap
            apiKey={process.env.NEXT_PUBLIC_GMAP_API_KEY ?? ""}
            zoom={zoom}
            center={center}
            onIdle={onIdle}
            onMarkerClick={onMarkerClick}
            markers={data?.data}
            highlightedMarkerId={highlightedHotel?.hotelId}
          />
        </div>
        <div>{highlightedHotel && <Card hotel={highlightedHotel} />}</div>
      </main>
    </div>
  );
}
